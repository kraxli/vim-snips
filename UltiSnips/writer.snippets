
# ┌────────────────────────────────────────────────────────────────────┐
# │ the following is based on https://castel.dev/post/lecture-notes-1/ │
# └────────────────────────────────────────────────────────────────────┘

# project specfic snippets:
# set rtp+=~/current_project
# where current_project is a symlink to my currently activated course/project.
# In that folder, I have a file ~/current_project/UltiSnips/tex.snippets in which I include course/project specific snippets

global !p
# import sys
# sys.path.append('../../pythonx')
# from snippet_helpers import *

# ----- Context -----:
# One thing to consider when writing these snippets is, ‘will these snip­pets col­lide with usual text?’
# For exmple while I’m typing the word disregard, the sr would expand to ^2, giving me di^2egard.
# The solution to this problem is adding a context to snippets. Using the syntaxhigh­lighting of Vim,
# it can be determined whether or not UltiSnips should expand the snippet depending if you’re in math or text. I came up with the following:

texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
texMathZones = texMathZones + ['textSnipTEX']

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

# def math():
#     return vim.eval("vimtex#syntax#in_mathzone()") != "0"

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False

# ----- end context -----
endglobal

snippet imgShot "screenshot link" wA
![${1:screen shot}](${2:`!p snip.rv = vim.eval('g:dir_screenshots')`${3:`!p snip.rv = os.sep + file_most_recent(vim.eval('g:dir_screenshots'))`}})
endsnippet

# snippet linkShot "screenshot link" wA
# [${1:screen shot}](${2:`!p snip.rv = vim.eval('g:dir_screenshots')`${3:`!p snip.rv = os.sep + file_most_recent(vim.eval('g:dir_screenshots'))`}})
# endsnippet

snippet dirShot "get screenshot directory"
`!p snip.rv = vim.eval('g:dir_screenshots') + os.sep`$0
endsnippet
# [${1:shot description}](${2:`!p snip.rv = file_most_recent(vim.eval('g:dir_screenshots'))`})
# ${1:${VISUAL}}


snippet case
case ${1:word} in
    ${2:pattern} ) $0;;
esac
endsnippet

##########
#  MATH  #
##########

snippet $mi "Math inline" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet
# The w at the end of the first line means that this snippet will expand at word bound­aries,
# so e.g. hellomi won’t ex­pand, but hello mi will.

# snippet md "Math display" wA
# \[
# ${1:${VISUAL}}
# .\] $0
# endsnippet

snippet $$ "Math display" wbA
$$
	${1:${VISUAL}}
$$
$0
endsnippet

snippet $d "Math display" wA
$$
	${1:${VISUAL}}
$$
$0
endsnippet


# ----- Fractions -----:
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet frac "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

# match for expressions like 3/, 4ac/, 6\pi^2/, a_2/, etc. using regular expressions
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

# this fractions I’d like to share is one that uses your selection to make a fraction.
# You can use it by first selecting some text, then pressing Tab, typing / and pressing Tab again.
priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet
# The code for this snippet uses a regular expression for its trigger.
# It expands the snippet when you type a character followed by a digit,
# which encoded by [A-Za-z]\d, or a character followed by _ and two dig­its: [A-Za-z]_\d\d
# When you wrap parts of a regular expression in a group using parenthesis, e.g. (\d\d), you can use them in the
# expansion of the snippet via match.group(i) in Python.
# ----- end fraction -----


# ----- Sympy and Mathematica -----:
snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

# snippet is one that uses sympy to evaluate mathematical expressions.
# For example: sympy Tab expands to sympy| sympy, and sympy 1 + 1 sympy Tab ex­pands to 2.
priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet
# ----- end sympy / mathematica -----

snippet => "implies" w
\implies
endsnippet

snippet =< "implied by" w
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet


snippet == "equals" i
&= $1 \\\\
endsnippet

snippet != "equals" i
\neq
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet || "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet \{} "left{ right}" iA
\left{ ${1:${VISUAL}} \right} $0
endsnippet

snippet lrb "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet [] "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" i
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet <> "left< right>" iA
\left< ${1:${VISUAL}} \right> $0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet dint "integral" w
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

snippet 'z "zeta" w
\zeta
endsnippet

snippet zeta "zeta" w
\zeta
endsnippet

# snippet sum "sum" w
# \sum_{n=${1:0}}^{${3:\infty}} ${4:${VISUAL}} $0
# endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}}
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" i
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" i
\le
endsnippet

snippet >= "geq" i
\ge
endsnippet

context "math()"
snippet EE "geq" iA
\exists
endsnippet

context "math()"
snippet AA "forall" iA
\forall
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

snippet lll "l" iA
\ell
endsnippet



context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla
endsnippet

context "math()"
snippet xx "cross" iA
\times
endsnippet

priority 100
# snippet * "cdot" iA
# \cdot
# endsnippet

# priority 200
# snippet '\cdot *' "cdot" iA
# *
# endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" i
\gg
endsnippet

snippet << "<<" i
\ll
endsnippet

snippet DD "delta" i
\Delta
endsnippet

snippet ~~ "~" i
\sim
endsnippet

context "math()"
snippet set "set" w
\\{$1\\} $0
endsnippet

snippet || "mid" i
 \mid
endsnippet


context "math()"
snippet cc "subset" Ai
\subset
endsnippet

snippet notin "not in " iA
\not\in
endsnippet

context "math()"
snippet in "in " i
\in
endsnippet

snippet NN "n" i
\N
endsnippet

snippet Nn "cap" i
\cap
endsnippet

snippet UU "cup" i
\cup
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" i
\O
endsnippet

snippet RR "real" i
\R
endsnippet

snippet QQ "Q" i
\Q
endsnippet

snippet ZZ "Z" i
\Z
endsnippet

snippet <! "normal" i
\triangleleft
endsnippet

snippet <> "hokje" i
\diamond
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet SI "SI" i
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

# Postfix snippets:
# Some other snippets I find worth sharing are post­fix snippets. Examples of such snippets are
# phat → \hat{p} and zbar → \overline{z}. A similar snippet is a postfix vector, for example v,. → \vec{v} and v., → \vec{v}.
# The order of , and . doesn’t matter, so I can press them both at the same time. These snippets are a real time-saver,
# because you can type in the same order the lecturer writes on the blackboard.
#  Note that I can still use bar and hat prefix too, as I’ve added them with a lower priority
priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet letw "let omega" i
Let $\Omega \subset \C$ be open.
endsnippet


# For quantum mechanics, I have snippets for bra/ket notation.
snippet "\<(.*?)\|" "bra" ri
\bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "\|(.*?)\>" "ket" ri
\ket{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" ri
`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet


